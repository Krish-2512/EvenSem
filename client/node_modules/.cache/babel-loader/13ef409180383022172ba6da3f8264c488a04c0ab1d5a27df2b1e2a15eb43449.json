{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Link, useNavigate } from 'react-router-dom';\n//\n// const Dashboard = ({ token, onLogout }) => {\n//   const [evaluations, setEvaluations] = useState([]);\n//   const [cvs, setCvs] = useState([]);\n//   const [selectedCandidate, setSelectedCandidate] = useState(null);\n//   const [message, setMessage] = useState('');\n//   const navigate = useNavigate();\n//\n//   // Decode token to get role\n//   const role = token ? JSON.parse(atob(token.split('.')[1])).role : '';\n//\n//   const fetchEvaluations = async () => {\n//     try {\n//       const config = {\n//         headers: { Authorization: `Bearer ${token}` }\n//       };\n//       const response = await axios.get('http://127.0.0.1:8000/api/evaluations', config);\n//       setEvaluations(response.data);\n//     } catch (error) {\n//       console.error('Error fetching evaluations:', error);\n//       setMessage(error.response?.data?.detail || 'Error fetching evaluations.');\n//     }\n//   };\n//\n//   const fetchCvs = async () => {\n//     try {\n//       const config = {\n//         headers: { Authorization: `Bearer ${token}` }\n//       };\n//       const response = await axios.get('http://127.0.0.1:8000/api/cvs', config);\n//       setCvs(response.data);\n//     } catch (error) {\n//       console.error('Error fetching CVs:', error);\n//       setMessage(error.response?.data?.detail || 'Error fetching CVs.');\n//     }\n//   };\n//\n//   useEffect(() => {\n//     fetchCvs();\n//     fetchEvaluations();\n//   }, [token]);\n//\n//   const getCvDetails = (username, job_id) => {\n//     return cvs.find(cv => cv.username === username && cv.job_id === job_id) || {};\n//   };\n//\n//   const getEvaluation = (username, job_id) => {\n//     return evaluations.find(evaluation => evaluation.username === username && evaluation.job_id === job_id) || null;\n//   };\n//\n//   const handleEvaluateCv = async (username, job_id) => {\n//   try {\n//     // Validate inputs\n//     if (!username) {\n//       setMessage('Cannot evaluate CV: Username is missing.');\n//       return;\n//     }\n//     if (job_id === null || job_id === undefined) {\n//       setMessage('Cannot evaluate CV: Job ID is missing.');\n//       return;\n//     }\n//     console.log('Evaluating CV with:', { username, job_id });\n//     const config = {\n//       headers: { Authorization: `Bearer ${token}` }\n//     };\n//     const response = await axios.post('http://127.0.0.1:8000/api/evaluate-cv', { username, job_id }, config);\n//     console.log('Evaluation response:', response.data);\n//     setMessage(response.data.message || 'CV evaluated successfully!');\n//     await fetchEvaluations();\n//   } catch (error) {\n//     console.error('Evaluation error:', error.response?.data);\n//     let errorMessage = 'Error evaluating CV.';\n//     if (error.response?.data?.detail) {\n//       if (typeof error.response.data.detail === 'string') {\n//         errorMessage = error.response.data.detail;\n//       } else {\n//         errorMessage = error.response.data.detail.msg || JSON.stringify(error.response.data.detail);\n//       }\n//     }\n//     setMessage(errorMessage);\n//   }\n// };\n//   const openModal = (candidate) => {\n//     setSelectedCandidate(candidate);\n//   };\n//\n//   const closeModal = () => {\n//     setSelectedCandidate(null);\n//   };\n//\n//   const getSkills = (structuredContent) => {\n//     const cvSkills = structuredContent.skills || [];\n//     const cleanedSkills = [];\n//     for (const skillEntry of cvSkills) {\n//       if ([\"achievements\", \"positions of responsibility\", \"courses taken\"].some(section => skillEntry.toLowerCase().includes(section))) {\n//         break;\n//       }\n//       if (skillEntry.includes(\"•\")) {\n//         const skillPart = skillEntry.split(\"•\").slice(-1)[0].trim();\n//         const skills = skillPart.replace(\",\", \" \").split().map(s => s.trim().replace(\"*\", \"\"));\n//         cleanedSkills.push(...skills);\n//       }\n//     }\n//     return cleanedSkills;\n//   };\n//\n//   const handleLogout = () => {\n//     onLogout();\n//     navigate('/login');\n//   };\n//\n//   return (\n//     <div className=\"App\">\n//       <h1>CvAlign: Candidate Dashboard</h1>\n//       <nav className=\"nav\">\n//         <Link to=\"/job-description\" className=\"nav-link\">Job Description</Link>\n//         <Link to=\"/dashboard\" className=\"nav-link\">Dashboard</Link>\n//         {role === 'admin' && (\n//           <Link to=\"/job-openings\" className=\"nav-link\">Job Openings</Link>\n//         )}\n//         <button onClick={handleLogout} className=\"logout-button\">Logout</button>\n//       </nav>\n//\n//       {message && <p className=\"form-message\">{message}</p>}\n//\n//       {cvs.length === 0 ? (\n//         <p>No candidates have applied to your job description yet.</p>\n//       ) : (\n//         <table className=\"table\">\n//           <thead className=\"table-head\">\n//             <tr>\n//               <th>Username</th>\n//               <th>CV Filename</th>\n//               <th>Job Role</th>\n//               <th>Relevance Score</th>\n//               <th>Feedback</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {cvs.map((cv) => {\n//               const evaluation = getEvaluation(cv.username, cv.job_id);\n//               return (\n//                 <tr key={`${cv.username}-${cv.job_id}`} className=\"table-row\">\n//                   <td>{cv.username}</td>\n//                   <td>\n//                     <a href={cv.cloud_url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"modal-link\">\n//                       {cv.filename}\n//                     </a>\n//                   </td>\n//                   <td>{cv.job_title || 'Not specified'}</td>\n//                   <td>{evaluation ? evaluation.relevance_score.toFixed(2) : 'Not evaluated'}</td>\n//                   <td>{evaluation ? evaluation.feedback : 'Not evaluated'}</td>\n//                   <td>\n//                     {!evaluation ? (\n//                       <button\n//                         onClick={() => handleEvaluateCv(cv.username, cv.job_id)}\n//                         className=\"table-button\"\n//                       >\n//                         Evaluate\n//                       </button>\n//                     ) : (\n//                       <button\n//                         onClick={() => openModal(evaluation)}\n//                         className=\"table-button\"\n//                       >\n//                         View Details\n//                       </button>\n//                     )}\n//                   </td>\n//                 </tr>\n//               );\n//             })}\n//           </tbody>\n//         </table>\n//       )}\n//\n//       {selectedCandidate && (() => {\n//         const cv = getCvDetails(selectedCandidate.username, selectedCandidate.job_id);\n//         const structuredContent = cv.structured_content || {};\n//         const jobSkills = [\"leadership\", \"agile\"];\n//         const cvSkills = getSkills(structuredContent);\n//         const matchingSkills = cvSkills.filter(skill => jobSkills.includes(skill.toLowerCase()));\n//         const missingSkills = jobSkills.filter(skill => !cvSkills.some(cvSkill => cvSkill.toLowerCase() === skill.toLowerCase()));\n//\n//         return (\n//           <div className=\"modal-overlay\">\n//             <div className=\"modal-content\">\n//               <h2 className=\"modal-heading\">{selectedCandidate.username} - CV Details</h2>\n//               <p><strong>Job Role:</strong> {selectedCandidate.job_title || 'Not specified'}</p>\n//               <p><strong>Relevance Score:</strong> {selectedCandidate.relevance_score.toFixed(2)}</p>\n//               <p><strong>Feedback:</strong> {selectedCandidate.feedback}</p>\n//\n//               <div className=\"modal-section\">\n//                 <h3 className=\"modal-subheading\">Detailed Feedback</h3>\n//                 <p><strong>Matching Skills:</strong> {matchingSkills.length > 0 ? matchingSkills.join(\", \") : \"None\"}</p>\n//                 <p><strong>Missing Skills:</strong> {missingSkills.length > 0 ? missingSkills.join(\", \") : \"None\"}</p>\n//                 <p><strong>Experience Summary:</strong> {structuredContent.experience?.length > 0 ? `${structuredContent.experience.length} entries found, including internships and projects.` : \"No experience entries found.\"}</p>\n//               </div>\n//\n//               <div className=\"modal-section\">\n//                 <h3 className=\"modal-subheading\">CV Breakdown</h3>\n//                 <div className=\"modal-section\">\n//                   <h4 className=\"modal-subheading\">Skills:</h4>\n//                   <ul className=\"modal-list\">\n//                     {(structuredContent.skills || []).map((skill, index) => (\n//                       <li key={index}>{skill}</li>\n//                     ))}\n//                   </ul>\n//                 </div>\n//                 <div className=\"modal-section\">\n//                   <h4 className=\"modal-subheading\">Experience:</h4>\n//                   <ul className=\"modal-list\">\n//                     {(structuredContent.experience || []).map((exp, index) => (\n//                       <li key={index}>{exp}</li>\n//                     ))}\n//                   </ul>\n//                 </div>\n//                 <div className=\"modal-section\">\n//                   <h4 className=\"modal-subheading\">Education:</h4>\n//                   <ul className=\"modal-list\">\n//                     {(structuredContent.education || []).map((edu, index) => (\n//                       <li key={index}>{edu}</li>\n//                     ))}\n//                   </ul>\n//                 </div>\n//                 {structuredContent.positions_of_responsibility && (\n//                   <div className=\"modal-section\">\n//                     <h4 className=\"modal-subheading\">Positions of Responsibility:</h4>\n//                     <ul className=\"modal-list\">\n//                       {(structuredContent.positions_of_responsibility || []).map((pos, index) => (\n//                         <li key={index}>{pos}</li>\n//                       ))}\n//                     </ul>\n//                   </div>\n//                 )}\n//                 {cv.cloud_url && (\n//                   <div className=\"modal-section\">\n//                     <h4 className=\"modal-subheading\">CV Link:</h4>\n//                     <a href={cv.cloud_url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"modal-link\">\n//                       View CV\n//                     </a>\n//                   </div>\n//                 )}\n//               </div>\n//\n//               <button\n//                 onClick={closeModal}\n//                 className=\"modal-close-button\"\n//               >\n//                 Close\n//               </button>\n//             </div>\n//           </div>\n//         );\n//       })()}\n//     </div>\n//   );\n// };\n//\n// export default Dashboard;","map":{"version":3,"names":[],"sources":["D:/resumeFolder/CV-Align/frontend/src/components/Dashboard.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { Link, useNavigate } from 'react-router-dom';\r\n//\r\n// const Dashboard = ({ token, onLogout }) => {\r\n//   const [evaluations, setEvaluations] = useState([]);\r\n//   const [cvs, setCvs] = useState([]);\r\n//   const [selectedCandidate, setSelectedCandidate] = useState(null);\r\n//   const [message, setMessage] = useState('');\r\n//   const navigate = useNavigate();\r\n//\r\n//   // Decode token to get role\r\n//   const role = token ? JSON.parse(atob(token.split('.')[1])).role : '';\r\n//\r\n//   const fetchEvaluations = async () => {\r\n//     try {\r\n//       const config = {\r\n//         headers: { Authorization: `Bearer ${token}` }\r\n//       };\r\n//       const response = await axios.get('http://127.0.0.1:8000/api/evaluations', config);\r\n//       setEvaluations(response.data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching evaluations:', error);\r\n//       setMessage(error.response?.data?.detail || 'Error fetching evaluations.');\r\n//     }\r\n//   };\r\n//\r\n//   const fetchCvs = async () => {\r\n//     try {\r\n//       const config = {\r\n//         headers: { Authorization: `Bearer ${token}` }\r\n//       };\r\n//       const response = await axios.get('http://127.0.0.1:8000/api/cvs', config);\r\n//       setCvs(response.data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching CVs:', error);\r\n//       setMessage(error.response?.data?.detail || 'Error fetching CVs.');\r\n//     }\r\n//   };\r\n//\r\n//   useEffect(() => {\r\n//     fetchCvs();\r\n//     fetchEvaluations();\r\n//   }, [token]);\r\n//\r\n//   const getCvDetails = (username, job_id) => {\r\n//     return cvs.find(cv => cv.username === username && cv.job_id === job_id) || {};\r\n//   };\r\n//\r\n//   const getEvaluation = (username, job_id) => {\r\n//     return evaluations.find(evaluation => evaluation.username === username && evaluation.job_id === job_id) || null;\r\n//   };\r\n//\r\n//   const handleEvaluateCv = async (username, job_id) => {\r\n//   try {\r\n//     // Validate inputs\r\n//     if (!username) {\r\n//       setMessage('Cannot evaluate CV: Username is missing.');\r\n//       return;\r\n//     }\r\n//     if (job_id === null || job_id === undefined) {\r\n//       setMessage('Cannot evaluate CV: Job ID is missing.');\r\n//       return;\r\n//     }\r\n//     console.log('Evaluating CV with:', { username, job_id });\r\n//     const config = {\r\n//       headers: { Authorization: `Bearer ${token}` }\r\n//     };\r\n//     const response = await axios.post('http://127.0.0.1:8000/api/evaluate-cv', { username, job_id }, config);\r\n//     console.log('Evaluation response:', response.data);\r\n//     setMessage(response.data.message || 'CV evaluated successfully!');\r\n//     await fetchEvaluations();\r\n//   } catch (error) {\r\n//     console.error('Evaluation error:', error.response?.data);\r\n//     let errorMessage = 'Error evaluating CV.';\r\n//     if (error.response?.data?.detail) {\r\n//       if (typeof error.response.data.detail === 'string') {\r\n//         errorMessage = error.response.data.detail;\r\n//       } else {\r\n//         errorMessage = error.response.data.detail.msg || JSON.stringify(error.response.data.detail);\r\n//       }\r\n//     }\r\n//     setMessage(errorMessage);\r\n//   }\r\n// };\r\n//   const openModal = (candidate) => {\r\n//     setSelectedCandidate(candidate);\r\n//   };\r\n//\r\n//   const closeModal = () => {\r\n//     setSelectedCandidate(null);\r\n//   };\r\n//\r\n//   const getSkills = (structuredContent) => {\r\n//     const cvSkills = structuredContent.skills || [];\r\n//     const cleanedSkills = [];\r\n//     for (const skillEntry of cvSkills) {\r\n//       if ([\"achievements\", \"positions of responsibility\", \"courses taken\"].some(section => skillEntry.toLowerCase().includes(section))) {\r\n//         break;\r\n//       }\r\n//       if (skillEntry.includes(\"•\")) {\r\n//         const skillPart = skillEntry.split(\"•\").slice(-1)[0].trim();\r\n//         const skills = skillPart.replace(\",\", \" \").split().map(s => s.trim().replace(\"*\", \"\"));\r\n//         cleanedSkills.push(...skills);\r\n//       }\r\n//     }\r\n//     return cleanedSkills;\r\n//   };\r\n//\r\n//   const handleLogout = () => {\r\n//     onLogout();\r\n//     navigate('/login');\r\n//   };\r\n//\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>CvAlign: Candidate Dashboard</h1>\r\n//       <nav className=\"nav\">\r\n//         <Link to=\"/job-description\" className=\"nav-link\">Job Description</Link>\r\n//         <Link to=\"/dashboard\" className=\"nav-link\">Dashboard</Link>\r\n//         {role === 'admin' && (\r\n//           <Link to=\"/job-openings\" className=\"nav-link\">Job Openings</Link>\r\n//         )}\r\n//         <button onClick={handleLogout} className=\"logout-button\">Logout</button>\r\n//       </nav>\r\n//\r\n//       {message && <p className=\"form-message\">{message}</p>}\r\n//\r\n//       {cvs.length === 0 ? (\r\n//         <p>No candidates have applied to your job description yet.</p>\r\n//       ) : (\r\n//         <table className=\"table\">\r\n//           <thead className=\"table-head\">\r\n//             <tr>\r\n//               <th>Username</th>\r\n//               <th>CV Filename</th>\r\n//               <th>Job Role</th>\r\n//               <th>Relevance Score</th>\r\n//               <th>Feedback</th>\r\n//               <th>Actions</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {cvs.map((cv) => {\r\n//               const evaluation = getEvaluation(cv.username, cv.job_id);\r\n//               return (\r\n//                 <tr key={`${cv.username}-${cv.job_id}`} className=\"table-row\">\r\n//                   <td>{cv.username}</td>\r\n//                   <td>\r\n//                     <a href={cv.cloud_url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"modal-link\">\r\n//                       {cv.filename}\r\n//                     </a>\r\n//                   </td>\r\n//                   <td>{cv.job_title || 'Not specified'}</td>\r\n//                   <td>{evaluation ? evaluation.relevance_score.toFixed(2) : 'Not evaluated'}</td>\r\n//                   <td>{evaluation ? evaluation.feedback : 'Not evaluated'}</td>\r\n//                   <td>\r\n//                     {!evaluation ? (\r\n//                       <button\r\n//                         onClick={() => handleEvaluateCv(cv.username, cv.job_id)}\r\n//                         className=\"table-button\"\r\n//                       >\r\n//                         Evaluate\r\n//                       </button>\r\n//                     ) : (\r\n//                       <button\r\n//                         onClick={() => openModal(evaluation)}\r\n//                         className=\"table-button\"\r\n//                       >\r\n//                         View Details\r\n//                       </button>\r\n//                     )}\r\n//                   </td>\r\n//                 </tr>\r\n//               );\r\n//             })}\r\n//           </tbody>\r\n//         </table>\r\n//       )}\r\n//\r\n//       {selectedCandidate && (() => {\r\n//         const cv = getCvDetails(selectedCandidate.username, selectedCandidate.job_id);\r\n//         const structuredContent = cv.structured_content || {};\r\n//         const jobSkills = [\"leadership\", \"agile\"];\r\n//         const cvSkills = getSkills(structuredContent);\r\n//         const matchingSkills = cvSkills.filter(skill => jobSkills.includes(skill.toLowerCase()));\r\n//         const missingSkills = jobSkills.filter(skill => !cvSkills.some(cvSkill => cvSkill.toLowerCase() === skill.toLowerCase()));\r\n//\r\n//         return (\r\n//           <div className=\"modal-overlay\">\r\n//             <div className=\"modal-content\">\r\n//               <h2 className=\"modal-heading\">{selectedCandidate.username} - CV Details</h2>\r\n//               <p><strong>Job Role:</strong> {selectedCandidate.job_title || 'Not specified'}</p>\r\n//               <p><strong>Relevance Score:</strong> {selectedCandidate.relevance_score.toFixed(2)}</p>\r\n//               <p><strong>Feedback:</strong> {selectedCandidate.feedback}</p>\r\n//\r\n//               <div className=\"modal-section\">\r\n//                 <h3 className=\"modal-subheading\">Detailed Feedback</h3>\r\n//                 <p><strong>Matching Skills:</strong> {matchingSkills.length > 0 ? matchingSkills.join(\", \") : \"None\"}</p>\r\n//                 <p><strong>Missing Skills:</strong> {missingSkills.length > 0 ? missingSkills.join(\", \") : \"None\"}</p>\r\n//                 <p><strong>Experience Summary:</strong> {structuredContent.experience?.length > 0 ? `${structuredContent.experience.length} entries found, including internships and projects.` : \"No experience entries found.\"}</p>\r\n//               </div>\r\n//\r\n//               <div className=\"modal-section\">\r\n//                 <h3 className=\"modal-subheading\">CV Breakdown</h3>\r\n//                 <div className=\"modal-section\">\r\n//                   <h4 className=\"modal-subheading\">Skills:</h4>\r\n//                   <ul className=\"modal-list\">\r\n//                     {(structuredContent.skills || []).map((skill, index) => (\r\n//                       <li key={index}>{skill}</li>\r\n//                     ))}\r\n//                   </ul>\r\n//                 </div>\r\n//                 <div className=\"modal-section\">\r\n//                   <h4 className=\"modal-subheading\">Experience:</h4>\r\n//                   <ul className=\"modal-list\">\r\n//                     {(structuredContent.experience || []).map((exp, index) => (\r\n//                       <li key={index}>{exp}</li>\r\n//                     ))}\r\n//                   </ul>\r\n//                 </div>\r\n//                 <div className=\"modal-section\">\r\n//                   <h4 className=\"modal-subheading\">Education:</h4>\r\n//                   <ul className=\"modal-list\">\r\n//                     {(structuredContent.education || []).map((edu, index) => (\r\n//                       <li key={index}>{edu}</li>\r\n//                     ))}\r\n//                   </ul>\r\n//                 </div>\r\n//                 {structuredContent.positions_of_responsibility && (\r\n//                   <div className=\"modal-section\">\r\n//                     <h4 className=\"modal-subheading\">Positions of Responsibility:</h4>\r\n//                     <ul className=\"modal-list\">\r\n//                       {(structuredContent.positions_of_responsibility || []).map((pos, index) => (\r\n//                         <li key={index}>{pos}</li>\r\n//                       ))}\r\n//                     </ul>\r\n//                   </div>\r\n//                 )}\r\n//                 {cv.cloud_url && (\r\n//                   <div className=\"modal-section\">\r\n//                     <h4 className=\"modal-subheading\">CV Link:</h4>\r\n//                     <a href={cv.cloud_url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"modal-link\">\r\n//                       View CV\r\n//                     </a>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//\r\n//               <button\r\n//                 onClick={closeModal}\r\n//                 className=\"modal-close-button\"\r\n//               >\r\n//                 Close\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         );\r\n//       })()}\r\n//     </div>\r\n//   );\r\n// };\r\n//\r\n// export default Dashboard;\r\n\r\n\r\n\r\n\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}